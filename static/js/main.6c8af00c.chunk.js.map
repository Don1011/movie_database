{"version":3,"sources":["Components/Main/Search/Component.js","Components/Main/Results/Movie/Component.js","Components/Main/Results/Component.js","Components/Main/Details/Component.js","Components/Main/Component.js","App.js","serviceWorker.js","index.js"],"names":["Search","saveInput","search","className","type","placeholder","onKeyUp","onClick","Movie","props","setActiveMovie","data","src","Poster","alt","Title","Results","setActive","map","key","imdbID","displayImages","App","this","movie","Year","Type","closeDetails","Component","query","state","inputData","axios","then","res","setState","activeMovie","boolValState","e","input","target","value","toggleDisplay","boolVal","MainView","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0WAaeA,G,YATA,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,OAC1B,OACE,yBAAKC,UAAY,uBACf,2BAAOC,KAAO,OAAOD,UAAY,YAAYE,YAAc,oBAAoBC,QAAWL,IAC1F,4BAAQM,QAAWL,EAAQC,UAAY,kCCQ9BK,G,YAbD,SAACC,GACX,OACI,0BAAMF,QAAW,kBAAME,EAAMC,eAAeD,EAAME,QAC9C,yBAAKR,UAAY,SACb,yBAAKS,IAAMH,EAAME,KAAKE,OAAQC,IAAG,UAAML,EAAME,KAAKI,MAAjB,UAAgCZ,UAAY,UAC7E,yBAAKA,UAAY,SACZM,EAAME,KAAKI,WCmBjBC,EAxBC,SAAC,GAA4B,IAA3BL,EAA0B,EAA1BA,KAAMD,EAAoB,EAApBA,eAiBpB,OACI,yBAAKP,UAAY,WAjBD,SAACQ,EAAMM,GACvB,OAAGN,EACMA,EAAKO,KAAI,SAACP,GACb,OACI,kBAAC,EAAD,CAAOQ,IAAOR,EAAKS,OAAQT,KAAQA,EAAMD,eAAkBO,OAKjE,yBAAKd,UAAW,cAAhB,8BASCkB,CAAcV,EAAMD,KCAlBY,G,6KAjBP,OACI,yBAAKnB,UAAY,aACd,kBAAC,EAAD,CAAOQ,KAAQY,KAAKd,MAAMe,QACzB,yBAAKrB,UAAY,cACb,qCADJ,IACmBoB,KAAKd,MAAMe,MAAMT,MADpC,IAC2C,6BAAM,6BAAM,6BAAM,6BAAM,6BAAM,6BACrE,oCAFJ,IAEkBQ,KAAKd,MAAMe,MAAMC,KAFnC,IAEyC,6BAAM,6BAAM,6BAAM,6BAAM,6BAAM,6BACnE,sCAHJ,IAGoBF,KAAKd,MAAMe,MAAMJ,OAHrC,IAG6C,6BAAM,6BAAM,6BAAM,6BAAM,6BAAM,6BACvE,oCAJJ,IAIkBG,KAAKd,MAAMe,MAAME,KAJnC,IAIyC,6BAAM,6BAAM,6BAAM,6BAAM,6BAAM,8BAEvE,yBAAKvB,UAAY,wBACf,4BAAQA,UAAY,cAAcI,QAAWgB,KAAKd,MAAMkB,cAAxD,e,GAZAC,c,iBCEZN,E,kDACJ,aAAc,IAAD,8BACX,gBAUFpB,OAAS,WACP,IAAI2B,EAAQ,EAAKC,MAAMC,UACvBC,IAAM,6FAAD,OAA8FH,IAASI,MAAK,YAAa,IACtHC,EADqH,EAAVvB,KAChGX,OACf,EAAKmC,SAAL,eACK,EAAKL,MADV,CAEEnB,KAAMuB,SAjBD,EAuBbxB,eAAiB,SAACc,GAChB,EAAKW,SAAL,eACK,EAAKL,MADV,CAEEM,YAAaZ,EACba,cAAc,MA3BL,EAgCbpC,UAAY,SAACqC,GAEX,GAAY,SAATA,EAAEnB,IACH,EAAKjB,aACF,CACH,IAAIqC,EAAQD,EAAEE,OAAOC,MACrB,EAAKN,SAAL,eACK,EAAKL,MADV,CAEEC,UAAWQ,OAxCJ,EA8CbZ,aAAe,WACb,EAAKQ,SAAL,eACK,EAAKL,MADV,CAEEM,YAAa,GACbC,cAAc,MAlDL,EAsDbK,cAAgB,SAACC,GACf,OAAGA,EACM,kBAAC,EAAD,CAAUzC,OAAU,EAAKA,OAAQD,UAAa,EAAKA,UAAWU,KAAQ,EAAKmB,MAAMnB,KAAMD,eAAkB,EAAKA,iBAE9G,kBAAC,EAAD,CAASiB,aAAgB,EAAKA,aAAcH,MAAS,EAAKM,MAAMM,eAxDzE,EAAKN,MAAQ,CACXC,UAAW,GACXpB,KAAO,GACPyB,YAAa,GACbC,cAAc,GANL,E,qDA+DX,OACEd,KAAKmB,cAAcnB,KAAKO,MAAMO,kB,GAjElBT,aAuEZgB,EAAW,SAACnC,GAChB,OACE,oCACE,6BACE,kBAAC,EAAD,CAAQP,OAAUO,EAAMP,OAAQD,UAAaQ,EAAMR,aAErD,6BACE,kBAAC,EAAD,CAASU,KAAQF,EAAME,KAAMD,eAAkBD,EAAMC,oBAK9CY,ICtEAA,E,uKAXX,OACI,6BACE,6BACE,+CAEF,kBAAC,EAAD,W,GARQM,aCOEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c8af00c.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./search.css\";\r\nimport \"./fontawesome/css/all.css\";\r\n\r\nconst Search = ({saveInput, search}) => {\r\n  return (\r\n    <div className = \"searchbar_container\">\r\n      <input type = \"text\" className = \"searchbar\" placeholder = \"Enter Movie Title\" onKeyUp = {saveInput}/>\r\n      <button onClick = {search} className = \"fa fa-search search_button\"></button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport \"./movie.css\";\r\n\r\nconst Movie = (props) => {\r\n    return (\r\n        <span onClick = {() => props.setActiveMovie(props.data)}>\r\n            <div className = \"movie\">\r\n                <img src= {props.data.Poster} alt= {`${props.data.Title} image`} className = \"image\"/>\r\n                <div className = \"title\">\r\n                    {props.data.Title}\r\n                </div>\r\n            </div>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Movie;\r\n","import React from 'react';\r\nimport \"./results.css\";\r\nimport Movie from \"./Movie/Component\";\r\n\r\nconst Results = ({data, setActiveMovie}) => {\r\n    let displayImages = (data, setActive) => {\r\n        if(data){\r\n          return data.map((data) => {\r\n              return(\r\n                  <Movie key = {data.imdbID} data = {data} setActiveMovie = {setActive}/>\r\n              )\r\n          })\r\n        }else{\r\n          return(\r\n            <div className= \"no_results\">\r\n              No results for your search\r\n            </div>\r\n          )\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className = \"results\">\r\n            {displayImages(data, setActiveMovie)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from 'react';\r\nimport Movie from \"../Results/Movie/Component.js\"\r\nimport \"./details.css\";\r\n\r\nclass App extends Component{\r\n    render(){\r\n        return(\r\n            <div className = \"container\">\r\n               <Movie data = {this.props.movie}/>\r\n                <div className = \"right_side\">\r\n                    <b>Title:</b> {this.props.movie.Title} <br /><br /><br /><br /><br /><br />\r\n                    <b>Year:</b> {this.props.movie.Year} <br /><br /><br /><br /><br /><br />\r\n                    <b>imdbID:</b> {this.props.movie.imdbID} <br /><br /><br /><br /><br /><br />\r\n                    <b>Type:</b> {this.props.movie.Type} <br /><br /><br /><br /><br /><br />\r\n                </div>\r\n                <div className = \"closeButtonContainer\">\r\n                  <button className = \"closeButton\" onClick = {this.props.closeDetails}>Close</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport Search from './Search/Component';\r\nimport Results from './Results/Component';\r\nimport Details from './Details/Component';\r\nimport axios from 'axios';\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      inputData: \"\",\r\n      data : [],\r\n      activeMovie: {},\r\n      boolValState: true\r\n    }\r\n  }\r\n\r\n\r\n  search = () => {\r\n    let query = this.state.inputData;\r\n    axios(`https://cors-anywhere.herokuapp.com/http://www.omdbapi.com/?i=tt3896198&apikey=6a62533f&s=${query}`).then(({data}) => {\r\n        var res = data.Search;\r\n        this.setState({\r\n          ...this.state,\r\n          data: res\r\n        })\r\n    })\r\n  }\r\n\r\n\r\n  setActiveMovie = (movie) => {\r\n    this.setState({\r\n      ...this.state,\r\n      activeMovie: movie,\r\n      boolValState: false\r\n    })\r\n  }\r\n\r\n\r\n  saveInput = (e) => {\r\n    // alert(e.key)\r\n    if(e.key == \"Enter\"){\r\n      this.search()\r\n    }else{\r\n      var input = e.target.value;\r\n      this.setState({\r\n        ...this.state,\r\n        inputData: input\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  closeDetails = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      activeMovie: {},\r\n      boolValState: true\r\n    })\r\n  }\r\n\r\n  toggleDisplay = (boolVal) => {\r\n    if(boolVal){\r\n      return <MainView search = {this.search} saveInput = {this.saveInput} data = {this.state.data} setActiveMovie = {this.setActiveMovie} />\r\n    }else{\r\n      return <Details closeDetails = {this.closeDetails} movie = {this.state.activeMovie}/>\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      this.toggleDisplay(this.state.boolValState)\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst MainView = (props) => {\r\n  return(\r\n    <>\r\n      <div>\r\n        <Search search = {props.search} saveInput = {props.saveInput} />\r\n      </div>\r\n      <div>\r\n        <Results data = {props.data} setActiveMovie = {props.setActiveMovie}/>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport default App;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './Components/Main/Component';\n// import Details from './Components/Details/Component';\n\nclass App extends Component {\n\n  render(){\n    return (\n        <div >\n          <div>\n            <h1>Movie Database</h1>\n          </div>\n          <Main />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}